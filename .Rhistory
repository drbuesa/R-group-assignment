geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10], fill = prop_var)) +
geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10], fill = prop_var[☺1:10])) +
geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10], fill = prop_var[1:10])) +
geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.3) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.3) +
theme_classic() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.3) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.3) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 1) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.7) +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line() +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = 1:10, y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
str(prop_var)
names(prop_var)
ggplot(data.frame(prop_var[1:10]),
aes(x = names(), y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = names(prop_var[•1:10]), y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
names(prop_var[•1:10]
ggplot(data.frame(prop_var[1:10]),
aes(x = names(prop_var[1:10]), y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = names(prop_var[1:10]), y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
n
names(prop_var[1:10])
ggplot(data.frame(prop_var[1:9]),
aes(x = names(prop_var[1:9]), y = prop_var[1:9])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:9]),
aes(x = paste0(PC, 1:9), y = prop_var[1:9])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:9]),
aes(x = paste0("PC", 1:9), y = prop_var[1:9])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(x = paste0("PC", 1:10), y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:10]),
aes(y = prop_var[1:10])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:9]),
aes(x = 1:9 , y = prop_var[1:9])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:9]),
aes(x = 1:9 , y = prop_var[1:9])) +
geom_bar(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(data.frame(prop_var[1:9]),
aes(y = prop_var[1:9])) +
geom_bar(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
col
ggplot(data.frame(prop_var[1:9]),
aes(x = 1:9 , y = prop_var[1:9])) +
geom_col(width = 0.7) +
geom_line(col = "blue") +
theme_bw() +
labs(x = "Principal Component",
y = "Percentage of Explained Variance")
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
ggplot(test, aes(x = test[,1:10]))+
geom_bar()
ggplot(test, aes(x = test[1:10]))+
geom_bar()
ggplot(test, aes(x = test))+
geom_bar()
ggplot(test, aes(y = test[1:10]))+
geom_bar()
test
ggplot(test, aes(x = test[100:110]))+
geom_bar()
ggplot(test, aes(x = test[,100:110]))+
geom_bar()
test[,100:104]
ggplot(test, aes(x = test[,100:104]))+
geom_bar(stat = "summay", fun.y = "mean")
ggplot(test, aes(x = test[,100:104]))+
geom_bar(stat = "summary", fun.y = "mean")
ggplot(test, aes(x = test[,100:104]))+
geom_bar(stat = "count", )
ggplot(test, aes(x = test[,100:104]))+
geom_bar(stat = "count")
ggplot(test, aes(x = test[,100:104]))+
geom_bar(stat = "count")
ggplot(test, aes(x = test[,100:104]))+
geom_bar()
ggplot(test, aes(x = test[,100:104], y = var()))+
geom_bar()
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
ggplot(test, aes(x = PC1, y = ACME)) +
geom_boxplot() +
geom_point(col = "blue")
ggplot(test, aes(x = PC1, y = ACME)) +
geom_boxplot()
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
ggplot(test, aes(x = PC1, y = PC2)) +
geom_point(col = "blue")
ggplot(test, aes(x = PC1, y = PC3)) +
geom_point(col = "blue")
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
#Density
plot(density(test$ACME), col = "blue");
summary(test$PC1)
summary(test$ACME)
#Density
plot(density(test$PC1), col = "blue");
#Density
plot(density(test$PC2), col = "blue");
#Density
plot(density(test$PC6), col = "blue");
#Density
plot(density(test$PC40), col = "blue");
#Density
plot(density(test$PC268), col = "blue");
#Density
plot(density(test$PC1), col = "blue");
#Density
plot(density(test$ACME), col = "blue");
year(test$Date)
substring(test$Date, 1, 4)
unique(substring(test$Date, 1, 4))
ggplot(test, aes(x = unique(substring(test$Date, 1, 4)), y = =ACME)) +
geom_bar()
ggplot(test, aes(x = unique(substring(test$Date, 1, 4)), y = ACME)) +
geom_bar()
ggplot(test, aes(x = Date, y = ACME)) +
geom_bar()
ggplot(test, aes(y = ACME)) +
geom_bar()
ggplot(test, aes(y = ACME)) +
geom_bar(stat = "prop")
ggplot(test, aes(y = ACME)) +
geom_bar(stat = "summary")
ggplot(test, aes(x = Date, y = ACME)) +
geom_bar(stat = "summary")
ggplot(test, aes(x = Date, y = ACME)) +
geom_bar(stat = "summary", mean)
ggplot(test, aes(x = Date, y = ACME)) +
geom_bar(stat = "summary", var)
#Density
plot(density(test$ACME), col = "blue");
#Density
plot(density(test$ACME), col = "blue", title("Test"));
#Density
plot(density(test$ACME), col = "blue", title = "Test");
#Density
plot(density(test$ACME), col = "blue", main = "Test");
#Density
plot(density(test$ACME), col = "blue", main = "Density function PC1");
#Density
plot(density(test$ACME), col = "blue", main = "Density function ACME");
bloxplot(test$ACME)
boxplot(test$ACME)
boxplot(test$ACME ~ test$ADAX)
boxplot(test$ACME)
boxplot(test$ADAX)
#Maps
install.packages("leaflet");
library(leaflet);
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
stations <- fread(file.path(folder_path, "station_info.csv"));
library(data.table);
stations <- fread(file.path(folder_path, "station_info.csv"));
head(stations)
m <- leaflet() %>%
addTiles("Test") %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-98.02325, lat=-34.80833, popup="ACME")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-98.02325, lat= 34.80833, popup="ACME")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng=-98.02325, lat= 34.80833, popup="ACME")
m
class(stations)
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~lat, popup = ~stid)
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~nlat, popup = ~stid)
m
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~nlat, popup = ~stid, color = red)
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~nlat, popup = ~stid, color = "red")
m
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~nlat, popup = ~stid, color = 'red', fill = FALSE, radius = 1)
m
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~nlat, popup = ~stid, color = 'red', fill = FALSE, radius = 3)
m
m <- leaflet(data = stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(lng = ~elon, lat = ~nlat, popup = ~stid, color = 'blue')
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(data = stations, lng = ~elon, lat = ~nlat, popup = ~stid, color = 'blue')
m
library(maps)
install.packages("maps")
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet() %>% addTiles() %>%
m <- leaflet(data = mapStates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(data = stations, lng = ~elon, lat = ~nlat, popup = ~stid, color = 'blue') %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE);
m <- leaflet(data = mapStates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircles(data = stations, lng = ~elon, lat = ~nlat, popup = ~stid, color = 'blue') %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE);
m
m <- leaflet(data = mapStates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
addCircles(data = stations, lng = ~elon, lat = ~nlat, popup = ~stid, color = 'blue');
m
m <- leaflet(data = mapStates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) %>%
addCircles(data = stations, lng = ~elon, lat = ~nlat, popup = ~stid, color = 'red');
m
library(caret);
select_important<-function(dat, n_vars, y){
varimp <- filterVarImp(x = dat, y=y, nonpara=TRUE);
varimp <- data.table(variable=rownames(varimp),imp=varimp[, 1]);
varimp <- varimp[order(-imp)];
selected <- varimp$variable[1:n_vars];
return(selected);
}
select_important(test[,100:120], n_vars = 5, y = test$KENT);
select_important(test[,100:120], n_vars = 5, y = test$BOIS);
select_important(test[,100:120], n_vars = 5, y = test$GOOD);
select_important(test[,100:120], n_vars = 5, y = test$HOOK);
plot(prop_var[1:10], type = "lines")
prop_var_acum <- cumsum(prop_var)
prop_var_acum
which(prop_var_acum >= 0.8)
which(prop_var_acum >= 0.8, arr.ind = TRUE)
which(prop_var_acum >= 0.8, arr.ind = F)
which(prop_var_acum >= 0.8)[1]
which(prop_var_acum >= 0.8, arr.ind = FALSE)[1]
variables <- sapply(test[,100:109], select_important, n_vars = 5, y=test[,2:99])
variables <- sapply(test[,100:109], select_important, n_vars = 5, y=test[,2:99])
select_important(test[,100:120], n_vars = 5, y = test$HOOK);
select_important(test[,100:109], n_vars = 5, y = test$HOOK);
select_important(y = test$HOOK, n_vars = 5, test[,100:109]);
variables <- sapply(test[,2:99], select_important, n_vars = 5, test[,100:109])
variables <- sapply(test[,2:99], select_important, n_vars = 5, dat = test[,100:109])
select_important<-function(y, n_vars, dat){
varimp <- filterVarImp(x = dat, y=y, nonpara=TRUE);
varimp <- data.table(variable=rownames(varimp),imp=varimp[, 1]);
varimp <- varimp[order(-imp)];
selected <- varimp$variable[1:n_vars];
return(selected);
}
select_important(y = test$HOOK, n_vars = 5, test[,100:109]);
variables <- sapply(test[,2:99], select_important, n_vars = 5, dat = test[,100:109])
summary(variables)
table(variables)
plot(vairables)
plot(variables)
plot(table(variables))
barplot(table(variables))
str(variables)
table(variables)
# Correlations and heatmap ---
col<- colorRampPalette(c("blue", "white", "red"))(20)
col
res <- cor(test[,100:109]);
round(res, 2)
plot(test[,100:109])
variables$ACME
class(variables)
str(variables)
dim(variables)
colnames(variables)
variables["ACME"]
variables[, "ACME"]
res <- cor(test$ACME, test[,100:109]);
round(res, 2)
heatmap(x = res, col = col, symm = F)
res <- cor(test[,2:10], test[,100:109]);
round(res, 2)
heatmap(x = res, col = col, symm = F)
res <- cor(test[,2:99], test[,100:109]);
round(res, 2)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("blue", "yellow", "red"))(20)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("white", "black"))(20)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("white", "red"))(20)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("blue", "white", "red"))(10)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("blue", "white", "red"))(15)
heatmap(x = res, col = col, symm = F)
heatmap(x = res, symm = F)
round(res, 2)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("blue", "white", "red"))(10)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res, col = col, symm = F)
variables[, "CHEY"]
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("green", "white", "red"))(20)
heatmap(x = res, col = col, symm = F)
# Correlations between Predictors and Response. Heatmap ---
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res, col = col, symm = F)
table(variables)
min(res)
max(res)
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
#GGPLOT ---
library(ggplot2)
ggplot(test, aes(x = PC1, y = ACME)) +
geom_point(col = "blue")
simple_regression <- lm(ACME ~ PC1, test)
summary(simple_regression)
multiple_regression <- lm(ACME ~ PC1 + PC2 + PC7 + PC4 + PC6, test)
summary(multiple_regression)
multiple_regression <- lm(ACME ~ PC1 + PC2, test)
summary(multiple_regression)
multiple_regression <- lm(ACME ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10, test)
summary(multiple_regression)
heatmap(x = res, col = col, symm = F)
multiple_regression <- lm(ACME ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC7 + PC10, test)
summary(multiple_regression)
folder_path <- "/Users/drodriguez45/Documents/GitHub/R-group-assignment/files/";
vars <- readRDS(file.path(folder_path, "additional_variables.RData"));
dim(vars)
sum(is.na(vars))
test2 <- vars[1:5113,]
sum(is.na(test2))
View(test2)
multiple_regression <- lm(ACME ~ PC1 + PC2 + PC3 + PC4, test)
summary(multiple_regression)
head(variables)
head(vars)
dim(vars)
library(Amelia)
missmap(vars)
plot(vars[,2:101])
plot(vars[,2:50])
plot(vars[,2:10])
plot(vars[,2:5])
boxplot(vars[,2:5])
boxplot(vars[,2])
boxplot(vars[,2])
boxplot(vars[,2], na.rm = T)
plot(vars[,2])
plot(vars[,2:3])
cor(vars[,2:3])
cor(vars[,2:3], rm.na = T)
